name: CI/CD using github actions & docker

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  CI-CD:
    runs-on: ubuntu-latest
    steps:

      # JDK setting - github actions에서 사용할 JDK 설정 (프로젝트나 AWS의 java 버전과 달라도 무방)
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'

      # 그래들 캐싱
      - name: Gradle Caching
        uses: actions/cache@v3
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            ${{ runner.os }}-gradle-

      # gradle build
      - name: Build with Gradle
        run: ./gradlew build -x test

      # docker build & push to production
      - name: Docker build & push
        run: 
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker build -f Dockerfile -t ${{ secrets.DOCKER_USERNAME }}/se-community-service .
          docker push ${{ secrets.DOCKER_USERNAME }}/se-community-service

      ## deploy to production
      - name: Deploy to community
        uses: appleboy/ssh-action@v0.1.5
        with:
          host: ${{ secrets.HOST_PROD }}
          port: 22
          username: ec2-user
          key: ${{ secrets.PRIVATE_KEY }}
          envs: GITHUB_SHA
          script: |
            sudo docker ps
            sudo docker pull ${{ secrets.DOCKER_USERNAME }}/se-community-service
            sudo docker stop ${{ secrets.DOCKER_USERNAME }}
            sudo docker rm ${{ secrets.DOCKER_USERNAME }}
            sudo docker run -d -p 8080:8080 ${{ secrets.DOCKER_USERNAME }}/se-community-service
            sudo docker image prune -f
